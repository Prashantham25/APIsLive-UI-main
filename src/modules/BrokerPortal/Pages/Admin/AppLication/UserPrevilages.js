import {
  Accordion,
  AccordionDetails,
  AccordionSummary,
  Grid,
  Modal,
  FormControl,
  FormControlLabel,
  Radio,
  RadioGroup,
  Stack,
  CircularProgress,
  Backdrop,
} from "@mui/material";
import MDBox from "components/MDBox";
import MDInput from "components/MDInput";
import MDTypography from "components/MDTypography";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import React, { useEffect, useState } from "react";
// import InputLabel from "@mui/material/InputLabel";
// import Select from "@mui/material/Select";
import Autocomplete from "@mui/material/Autocomplete";
import swal from "sweetalert";
import MDButton from "../../../../../components/MDButton";
import { useDataController } from "../../../context";
import { AdminData, GetRole } from "../data";
import { postRequest, getRequest } from "../../../../../core/clients/axiosclient";
import {
  GetAssignRole,
  SearchUserDetails,
  GetDynamicPermission1,
  GetRolePermission,
  GetRoleDash,
  GetSaveAssignDynamicPerm,
  GetRolePermissions,
  GetUserRole,
} from "../../../../BaseSetup/views/Users/data/index";
import CustomTreeView from "../../../../../components/CustomTreeView";

function BasicModal({ hndlePOSPOnBoard }) {
  const [controller] = useDataController();
  const { appReviewResponse } = controller;
  const pospdetails = appReviewResponse.pospdetailsJson;
  const [open, setOpen] = React.useState(false);
  const [value, setValue] = React.useState("autoGenerated");
  const [RadioFlag, setRadioFlag] = React.useState(true);
  const handleOpen = () => setOpen(true);
  const handleClose = () => setOpen(false);
  const handleChange = (event) => {
    setValue(event.target.value);
    console.log(value);
  };
  useEffect(() => {
    if (value === "ManualUpload") setRadioFlag(false);
    else setRadioFlag(true);
  });
  return (
    <div>
      <MDButton
        variant="contained"
        color="info"
        sx={{ mt: "2rem", ml: "50rem" }}
        // justifyContent="flex-end"
        onClick={handleOpen}
      >
        Proceed
      </MDButton>
      <Modal
        open={open}
        onClose={handleClose}
        aria-labelledby="modal-modal-title"
        aria-describedby="modal-modal-description"
      >
        <MDBox>
          <MDTypography id="modal-modal-description" sx={{ mt: 3 }}>
            <MDBox pt={10} pl={50}>
              <MDBox
                p={4}
                sx={{
                  background: "#FFFFFF",
                  height: "375px",
                  width: "634px",
                  borderRadius: "0px",
                }}
              >
                <Grid container spacing={1}>
                  <Grid xs={12} textAlign="center" mt={3}>
                    <MDTypography font-family="Roboto" fontSize="22px" color="primary">
                      {`Onboard Agent ( ${pospdetails.FirstName + pospdetails.LastName} )`}
                    </MDTypography>
                  </Grid>
                  <br />
                  <Grid xs={12} textAlign="center" mt={1}>
                    <FormControl>
                      <MDBox display="flex" flexDirection="row" sx={{ mt: 1 }}>
                        <MDTypography
                          sx={{ fontSize: "1.125rem", color: "#344054", weight: 600, pt: 0.7 }}
                        >
                          Letter Template Type
                        </MDTypography>

                        <RadioGroup
                          row
                          aria-labelledby="demo-row-radio-buttons-group-label"
                          name="row-radio-buttons-group"
                          sx={{ justifyContent: "center", ml: 2.5 }}
                          onChange={(event) => handleChange(event)}
                          value={value}
                        >
                          <FormControlLabel
                            value="autoGenerated"
                            control={<Radio />}
                            label="Auto Generated"
                          />

                          <FormControlLabel
                            value="ManualUpload"
                            control={<Radio />}
                            label="Manual Upload"
                          />
                        </RadioGroup>
                      </MDBox>
                    </FormControl>
                  </Grid>
                  {RadioFlag ? (
                    <Grid ml={6} mt={3}>
                      <MDInput label="select letter template" />
                    </Grid>
                  ) : (
                    <Grid ml={6} mt={3}>
                      <MDButton>Upload Template</MDButton>
                    </Grid>
                  )}

                  <Grid xs={12} textAlign="right" mt={14}>
                    <MDButton onClick={handleClose}>Cancel</MDButton>
                    &nbsp;&nbsp;
                    <MDButton color="success" onClick={hndlePOSPOnBoard}>
                      OnBoard Agent
                    </MDButton>
                  </Grid>
                </Grid>
              </MDBox>
            </MDBox>
          </MDTypography>
        </MDBox>
      </Modal>
    </div>
  );
}

function UserPrevilages() {
  const [controller] = useDataController();
  const { appReviewResponse, UserID } = controller;
  const pospdetails = appReviewResponse.pospdetailsJson;
  // const {userDetailsss} = appReviewResponse.pospdetailsJson.userDetails;
  console.log("pospdetails", UserID);
  const { UserType } = AdminData().admindetails.Masters;
  const [userDetails, setUserDetails] = useState({
    UserType: { mID: "", mValue: "" },
    UserRole: { mID: "", mValue: "" },
    roleID: "",
    UserID: "",
    AgentCode: "",
  });
  const [getRoleEnity, setGetroleEntity] = useState([]);
  const [dashboard, setDashboard] = useState([]);
  const [flag, setFlag] = useState(false);
  const [user, setUser] = useState([]);
  const [open, setOpen] = React.useState(false);
  const [assign, setAssign] = useState([]);
  const [report, setReport] = useState([]);
  const [saveRolePermission, setSaveRolePermission] = useState({
    userId: "",
    rolePermissionIds: [],
  });
  const [rolePermissionIds, setRolePermissionIds] = useState({
    roleId: "",
    permissionIds: [],
  });
  const [saveAssignDynamic, setSaveAssignDynamic] = useState({
    userId: "",
    rolePermissionIds: [],
  });
  const [rolePermissionIds1, setRolePermissionIds1] = useState({
    roleId: "",
    permissionIds: [],
  });
  const [, setFlagPrivilege] = useState(true);
  const [, setFlagDash] = useState(true);
  const [flagReport, setFlagReport] = useState(true);
  const handleClose = () => setOpen(false);
  const handleOpen = () => setOpen(true);

  useEffect(async () => {
    if (userDetails.AgentCode === "") {
      await getRequest(`Partner/GetAgentCode?partnerId=${53}&productId=${449}`).then((result) => {
        console.log("result", result);
        if (result.status === 200) {
          const newValue = { ...userDetails, AgentCode: result.data };
          setUserDetails(newValue);
        }
      });
    }
  }, [userDetails.AgentCode === ""]);

  // role
  const handleSaveRole = async () => {
    // debugger;
    const obj = {
      roleId: [],
      userId: "",
    };
    await GetUserRole(user[0].userId).then(async (res) => {
      // debugger;
      console.log("1234567890", res);
      if (res.data.length > 0) {
        obj.roleId.push(res.data[0].mID);
        obj.userId = user[0].userId;
      } else {
        obj.roleId.push(userDetails.UserRole.mID);
        obj.userId = user[0].userId;
        const role = await GetAssignRole(obj);
        console.log("rolesss", role);
      }
    });
    // setReport(role.data);
    const dash = await GetRoleDash(obj);

    console.log("dash1", dash);
    if (dash.data.length !== 0) {
      setDashboard(dash.data);
      setFlagDash(true);
    } else {
      setFlagDash(false);
    }

    const Permission = await GetRolePermission(obj);

    console.log("permission1", Permission);
    if (Permission.data.length !== 0) {
      setAssign(Permission.data);
      setFlagPrivilege(true);
    } else {
      setFlagPrivilege(false);
    }
    // debugger;
    const DynamicPermission = await GetDynamicPermission1(obj);

    console.log("dynamicPermission1", DynamicPermission);
    if (DynamicPermission.data.dynamicResponse.length !== 0) {
      setReport(DynamicPermission.data.dynamicResponse);
      setFlagReport(true);
    } else {
      setFlagReport(false);
    }
    // if (right.length > 0) {
    //   swal({
    //     icon: "success",
    //     text: "Role assigned successfully",
    //   });
    // } else {
    //   swal({
    //     icon: "success",
    //     text: "Role removed successfully",
    //   });
    // }
  };

  const handleEdit = async () => {
    // debugger;
    setFlag(true);
    await handleSaveRole();
    handleOpen();
    setFlag(false);
  };

  useEffect(() => {
    if (getRoleEnity.length === 0) {
      GetRole().then((resp) => {
        console.log(resp);
        setGetroleEntity(resp.data);
      });
    }
  }, [getRoleEnity.length === 0]);

  useEffect(() => {
    if (user.length === 0) {
      const userDto = {
        firstName: "  ",
        employeeNumber: "",
        emailId: pospdetails.EmailId,
        contactNumber: "",
        panNo: "",
        partnerId: "",
      };
      SearchUserDetails(userDto).then((response) => {
        setUser(response.data);
        // setUsersId(response.data.userId);
      });
    }
  }, [user.length === 0]);

  const handleUserRole = (event, value) => {
    if (value !== null) {
      setUserDetails((prevState) => ({ ...prevState, UserRole: value, roleID: value.mID }));
    } else {
      setUserDetails((prevState) => ({ ...prevState, UserType: "", roleID: "" }));
    }
  };

  const handleUserType = (event, value) => {
    if (value !== null) {
      setUserDetails((prevState) => ({ ...prevState, UserType: value }));
    } else {
      setUserDetails((prevState) => ({ ...prevState, UserType: { mID: "", mValue: "" } }));
    }
  };

  const hndlePOSPOnBoard = async () => {
    const newValue = {
      ...pospdetails,
      AgentCode: userDetails.AgentCode,
      Status: "Onboarded",
      userDetails,
    };
    await postRequest(`Partner/UpdatePOSPDetails`, newValue).then(async (data) => {
      if (data.data.status === 3) {
        console.log("1234567890", data);
        const notifReq = {
          proposalNo: "",
          policyNo: "pospdetails.EmailId",
          transactionId: "",
          customerId: "",
          key: pospdetails.EmailId,
          keyType: "",
          communicationId: 131,
          referenceId: 58,
          ICPDF: true,
          ISDMS: false,
        };
        await postRequest(
          `Policy/SendNotification?PolicyNumber=${""}&EmailId=${pospdetails.EmailId}`,
          notifReq
        ).then((result) => {
          console.log("result1", result);
        });
      }
    });
  };

  // const checkbox = (e, y, id, id1, id2, id3) => {
  //   // debugger;
  //   const aa = { ...y };
  //   console.log("aa", aa);
  //   aa.status = e.target.checked;

  //   if (aa.itemType === "Menu") {
  //     if (id3 !== undefined) {
  //       assign[id].mdata[id3].children[id2] = { ...aa };
  //     } else {
  //       assign[id].mdata[id2] = { ...aa };
  //     }

  //     setAssign([...assign]);
  //   }
  //   if (aa.itemType === "Dashboard") {
  //     if (id3 !== undefined) {
  //       dashboard[id].mdata[id3].children[id2] = { ...aa };
  //     } else {
  //       dashboard[id].mdata[id2] = { ...aa };
  //     }
  //     setDashboard([...dashboard]);
  //   }

  //   if (aa.mType === "Report") {
  //     console.log("report", report);
  //     console.log("repor-id", id);
  //     console.log("repor-id1", id1);
  //     report[id][id1].mdata[id2] = { ...aa };
  //     setReport([...report]);
  //   } else if (aa.mType === "BrokerProduct") {
  //     console.log("report", report);
  //     console.log("repor-id", id);
  //     console.log("repor-id1", id1);
  //     report[id][id1].mdata[id2] = { ...aa };
  //     setReport([...report]);
  //   } else {
  //     console.log("1234567890", y, id, id1, id2, id3, report);
  //     if (id3 !== undefined) {
  //       report[id][id1].mdata[id3].children[id2] = { ...aa };
  //     } else {
  //       report[id][id1].mdata[id2] = { ...aa };
  //     }
  //     setReport([...report]);
  //   }
  // };

  const [checkUnCheck, setCheckUncheck] = useState([]);

  const onCheck = (p2, i1, i2, p1) => {
    report[i1][i2].mdata = [...p2];
    setReport([...report]);
    if (p1.status === false) {
      setCheckUncheck([...checkUnCheck, p1]);
    } else {
      const some = checkUnCheck.filter((x) => x.mID !== p1.mID);
      setCheckUncheck(some);
    }
  };

  const treeInfo = {
    nodeId: "mID",
    label: "mValue",
    checked: "status",
    parentId: "parentId",
    children: "children",
  };

  const handleSave = async () => {
    saveRolePermission.userId = user[0].userId;
    if (assign.length > 0) {
      assign[0].mdata.forEach((x) => {
        if (x.status === false) {
          rolePermissionIds.roleId = x.roleId;

          rolePermissionIds.permissionIds.push(x.permissionId);
        }
        if (x.children.length > 0) {
          x.children.forEach((y) => {
            if (y.status === false) {
              rolePermissionIds.roleId = y.roleId;
              rolePermissionIds.permissionIds.push(y.permissionId);
            }
          });
        }
      });
    }
    if (dashboard.length > 0) {
      dashboard[0].mdata.forEach((x) => {
        if (x.status === false) {
          rolePermissionIds.roleId = x.roleId;
          rolePermissionIds.permissionIds.push(x.permissionId);
        }
        if (x.children.length > 0) {
          x.children.forEach((y) => {
            if (y.status === false) {
              rolePermissionIds.roleId = y.roleId;
              rolePermissionIds.permissionIds.push(y.permissionId);
            }
          });
        }
      });
    }
    saveRolePermission.rolePermissionIds = [
      ...saveRolePermission.rolePermissionIds,
      { ...rolePermissionIds },
    ];
    setSaveRolePermission(saveRolePermission);
    setRolePermissionIds(rolePermissionIds);
    const rolePerm = await GetRolePermissions(saveRolePermission);
    console.log("roleperm", rolePerm);

    saveAssignDynamic.userId = user[0].userId;
    if (report.length > 0) {
      if (report[0].length > 0) {
        report[0][0].mdata.forEach((p) => {
          if (p.status === false) {
            rolePermissionIds1.roleId = p.roleid;
            rolePermissionIds1.permissionIds = [...rolePermissionIds1.permissionIds, { ...p }];
          }
        });
      }
      report[4][0].mdata.forEach((x) => {
        if (x.status === false) {
          rolePermissionIds1.roleId = x.roleid;
          rolePermissionIds1.permissionIds = [...rolePermissionIds1.permissionIds, { ...x }];
        }
        if (x.children.length > 0) {
          x.children.forEach((y) => {
            if (y.status === false) {
              rolePermissionIds1.roleId = x.roleid;
              rolePermissionIds1.permissionIds = [...rolePermissionIds1.permissionIds, { ...y }];
            }
          });
        }
      });
    }
    console.log("1234567890", rolePermissionIds1);
    saveAssignDynamic.rolePermissionIds = [
      ...saveAssignDynamic.rolePermissionIds,
      { ...rolePermissionIds1 },
    ];

    const obj11 = {
      userId: user[0].userId,
      rolePermissionIds: [
        {
          roleId: userDetails.roleID,
          permissionIds: [...checkUnCheck],
        },
      ],
    };

    console.log("qwertyuiop", saveAssignDynamic);
    setSaveAssignDynamic(saveAssignDynamic);
    setRolePermissionIds1(rolePermissionIds1);
    const saveAssignDynamicperm = await GetSaveAssignDynamicPerm(obj11);
    console.log("saveAssign", saveAssignDynamicperm);

    // setTimeout(() => {
    //   window.location.reload(true);
    // }, 10000);
    swal({
      icon: "success",
      text: "Privilleged assigned sucessfully",
    });
  };

  return (
    <MDBox pt={3} mt={4} ml={2}>
      <Backdrop sx={{ color: "#fff", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={flag}>
        <CircularProgress />
      </Backdrop>
      <Modal
        sx={{ overflowY: "auto", m: "2rem" }}
        open={open}
        onClose={handleClose}
        aria-labelledby="simple-modal-title"
        aria-describedby="simple-modal-description"
      >
        {/* <Card> */}
        <MDBox
          sx={{
            maxHeight: "80vh",
            overflowY: "auto",
            bgcolor: "background.paper",
            p: 2,
          }}
        >
          <Grid ml={2} mr={2}>
            <Stack justifyContent="right" direction="row" spacing={2}>
              <MDButton color="white" round onClick={handleClose} textAlign="right">
                x
              </MDButton>
            </Stack>

            <Grid p={2}>
              <MDTypography variant="h4" color="primary" fontSize="1.25rem">
                Privileges
              </MDTypography>
            </Grid>
            {/* <Grid p={2}>
              <MDTypography variant="h2" color="Secondary" fontSize="1.25rem">
                Privileges
              </MDTypography>
            </Grid> */}
            {flagReport && (
              <Grid item xs={12} sm={12} md={12} lg={12} xl={12} xxl={12} p={2}>
                <MDBox>
                  {report.map((x1, i1) => (
                    <MDBox>
                      {x1.map((x2, i2) => (
                        <MDBox>
                          <MDTypography>{x2.name}</MDTypography>
                          <CustomTreeView
                            treeData={x2.mdata}
                            treeInfo={treeInfo}
                            onChange={(p1, p2) => onCheck(p2, i1, i2, p1)}
                          />
                        </MDBox>
                      ))}
                    </MDBox>
                  ))}
                </MDBox>
              </Grid>
            )}
            <Stack justifyContent="center" direction="row" p={2}>
              <MDButton variant="contained" onClick={handleSave}>
                Save
              </MDButton>
            </Stack>
          </Grid>
        </MDBox>
      </Modal>
      <Accordion
        defaultExpanded
        disableGutters
        sx={{ boxShadow: "unset", border: "unset", "&:before": { display: "none" } }}
      >
        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <MDTypography variant="h6" sx={{ color: "#0071D9", fontSize: "1.125rem" }}>
            User ID & Role Details
          </MDTypography>
        </AccordionSummary>
        <AccordionDetails expandIcon={<ExpandMoreIcon />}>
          <Grid container spacing={2}>
            <Grid item xs={12} sm={12} md={3} lg={3} xl={3} xxl={3}>
              <Autocomplete
                value={userDetails.UserRole}
                onChange={handleUserRole}
                options={getRoleEnity}
                getOptionLabel={(option) => option.mValue}
                renderInput={(params) => <MDInput label="User Roles" {...params} />}
                sx={{
                  "& .MuiOutlinedInput-root": {
                    padding: "5px!important",
                  },
                }}
              />
            </Grid>
            <Grid item xs={12} sm={12} md={3} lg={3} xl={3} xxl={3}>
              {/* <MDInput label="User Type" /> */}
              <Autocomplete
                onChange={handleUserType}
                value={userDetails.UserType}
                options={UserType}
                getOptionLabel={(option) => option.mValue}
                sx={{
                  "& .MuiOutlinedInput-root": {
                    padding: "5px!important",
                  },
                }}
                renderInput={(params) => (
                  <MDInput label="User Type" {...params} variant="outlined" />
                )}
              />
            </Grid>
            <Grid item xs={12} sm={12} md={3} lg={3} xl={3} xxl={3}>
              <MDInput
                label="User Name"
                value={pospdetails.FirstName + pospdetails.LastName}
                disabled
              />
            </Grid>
            <Grid item xs={12} sm={12} md={3} lg={3} xl={3} xxl={3}>
              <MDInput label="User Id" disabled value={pospdetails.EmailId} />
            </Grid>
            <Grid item xs={12} sm={12} md={3} lg={3} xl={3} xxl={3}>
              <MDInput label="User Email Id" value={pospdetails.EmailId} disabled />
            </Grid>
            <Grid item xs={12} sm={12} md={3} lg={3} xl={3} xxl={3}>
              <MDInput label="Mobile Number" value={pospdetails.MobileNo} disabled />
            </Grid>
          </Grid>
        </AccordionDetails>
      </Accordion>
      <Accordion
        defaultExpanded
        disableGutters
        sx={{ boxShadow: "unset", border: "unset", "&:before": { display: "none" } }}
      >
        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <MDTypography variant="h6" sx={{ color: "#0071D9", fontSize: "1.25rem" }}>
            Code Generation
          </MDTypography>
        </AccordionSummary>
        <AccordionDetails expandIcon={<ExpandMoreIcon />}>
          <Grid container spacing={2}>
            <Grid item xs={12} sm={12} md={3} lg={3} xl={3} xxl={3}>
              <MDInput label="Agent Code" disabled value={userDetails.AgentCode} />
            </Grid>
          </Grid>
        </AccordionDetails>
      </Accordion>
      <Accordion
        defaultExpanded
        disableGutters
        sx={{ boxShadow: "unset", border: "unset", "&:before": { display: "none" } }}
      >
        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <MDTypography variant="h6" sx={{ color: "#0071D9", fontSize: "1.125rem" }}>
            Location Details
          </MDTypography>
        </AccordionSummary>
        <AccordionDetails expandIcon={<ExpandMoreIcon />}>
          <Grid container spacing={2}>
            <Grid item xs={12} sm={12} md={3} lg={3} xl={3} xxl={3}>
              <MDInput
                label="Location/Region Zone"
                value={pospdetails.PermanentAddress.Area}
                disabled
              />
            </Grid>
            <Grid item xs={12} sm={12} md={3} lg={3} xl={3} xxl={3}>
              <MDInput label="State" value={pospdetails.PermanentAddress.State} disabled />
            </Grid>
            <Grid item xs={12} sm={12} md={3} lg={3} xl={3} xxl={3}>
              <MDInput label="City" value={pospdetails.PermanentAddress.District} disabled />
            </Grid>
            <Grid item xs={12} sm={12} md={3} lg={3} xl={3} xxl={3}>
              <MDInput label="Pincode" value={pospdetails.PermanentAddress.Pincode} disabled />
            </Grid>
            <Grid item xs={12} sm={12} md={3} lg={3} xl={3} xxl={3}>
              <MDInput label="Branch Code" />
            </Grid>
          </Grid>
        </AccordionDetails>
      </Accordion>
      <Accordion
        defaultExpanded
        disableGutters
        sx={{ boxShadow: "unset", border: "unset", "&:before": { display: "none" } }}
      >
        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <MDTypography variant="h6" sx={{ color: "#0071D9", fontSize: "1.25rem" }}>
            Reporting Manager Details
          </MDTypography>
        </AccordionSummary>
        <AccordionDetails expandIcon={<ExpandMoreIcon />}>
          <Grid container spacing={2}>
            <Grid item xs={12} sm={12} md={3} lg={3} xl={3} xxl={3}>
              <MDInput label="Region/Line/Sales Manager Name" />
            </Grid>
            <Grid item xs={12} sm={12} md={3} lg={3} xl={3} xxl={3}>
              <MDInput label="Region/Line/Sales Manager Code" />
            </Grid>
          </Grid>
        </AccordionDetails>
      </Accordion>
      <Accordion
        defaultExpanded
        disableGutters
        sx={{ boxShadow: "unset", border: "unset", "&:before": { display: "none" } }}
      >
        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <MDTypography variant="h6" sx={{ color: "#0071D9", fontSize: "1.25rem" }}>
            Insurance Companies
          </MDTypography>
        </AccordionSummary>
        <AccordionDetails expandIcon={<ExpandMoreIcon />}>
          <Grid container spacing={2}>
            <Grid item xs={12} sm={12} md={6} lg={6} xl={6} xxl={6}>
              <MDInput label="Insurance Companies " />
            </Grid>
            <Grid item xs={12} sm={12} md={6} lg={6} xl={6} xxl={6}>
              <MDButton onClick={handleEdit}> Assign Previlages </MDButton>
            </Grid>
          </Grid>
          <Grid item xs={12} sm={12} md={6} lg={6} xl={6} xxl={6}>
            <BasicModal hndlePOSPOnBoard={hndlePOSPOnBoard} />
          </Grid>
        </AccordionDetails>
      </Accordion>
    </MDBox>
  );
}

export default UserPrevilages;
